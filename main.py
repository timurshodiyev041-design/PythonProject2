import telebot
import requests
import time
from telebot import types

TOKEN = '8284016146:AAFSXT4zcslPpw5IKpce5Lp8b7pt4hT9CwE'

bot = telebot.TeleBot(TOKEN)

# --- –ö—ç—à ---
cache = {"timestamp": 0, "rates": {}, "ok": False}
user_state = {}

# --- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
def preload_rates():
    try:
        r = requests.get("https://api.frankfurter.app/latest", timeout=3)
        data = r.json()
        data["rates"]["EUR"] = 1.0
        cache["rates"] = data["rates"]
        cache["timestamp"] = time.time()
        cache["ok"] = True
        print("‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã:", e)
        cache["ok"] = False

preload_rates()  # –∑–∞–≥—Ä—É–∑–∏–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç (–≤ —Ñ–æ–Ω–µ) ---
def update_rates_if_needed():
    if time.time() - cache["timestamp"] > 600:
        preload_rates()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ ---
def get_rate(base, target):
    update_rates_if_needed()

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
    if not cache["ok"]:
        return None

    rates = cache["rates"]
    manual = {"UZS": 12800}  # –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å –∫ USD

    def to_usd(cur):
        if cur == "USD": return 1
        if cur == "EUR": return 1 / rates["USD"]
        if cur == "RUB": return rates["USD"] / rates.get("RUB", 90)
        if cur == "UZS": return 1 / manual["UZS"]
        return None

    def from_usd(cur):
        if cur == "USD": return 1
        if cur == "EUR": return rates["USD"]
        if cur == "RUB": return rates.get("RUB", 90) / rates["USD"]
        if cur == "UZS": return manual["UZS"]
        return None

    a = to_usd(base)
    b = from_usd(target)
    if a is None or b is None:
        return None
    return a * b

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def currency_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for cur in ["USD", "EUR", "RUB", "UZS"]:
        markup.add(types.KeyboardButton(cur))
    return markup

# --- /start ---
@bot.message_handler(commands=["start"])
def start(message):
    user_state[message.chat.id] = {"from": None, "amount": None, "to": None}
    bot.send_message(
        message.chat.id,
        "üí± –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –±—ã—Å—Ç—Ä–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, **–∏–∑ –∫–æ—Ç–æ—Ä–æ–π** —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:",
        parse_mode="Markdown",
        reply_markup=currency_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ ---
@bot.message_handler(content_types=["text"])
def handle_message(message):
    chat_id = message.chat.id
    text = message.text.upper().strip()

    if chat_id not in user_state:
        user_state[chat_id] = {"from": None, "amount": None, "to": None}

    state = user_state[chat_id]

    # –®–∞–≥ 1: –≤—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
    if state["from"] is None:
        if text not in ["USD", "EUR", "RUB", "UZS"]:
            bot.send_message(chat_id, "‚ùó –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=currency_keyboard())
            return
        state["from"] = text
        bot.send_message(chat_id, f"‚úÖ –ò–∑ –≤–∞–ª—é—Ç—ã: {text}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É:")
        return

    # –®–∞–≥ 2: –≤–≤–æ–¥ —Å—É–º–º—ã
    if state["amount"] is None:
        try:
            state["amount"] = float(text)
        except ValueError:
            bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 100 –∏–ª–∏ 12.5")
            return
        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, **–≤ –∫–æ—Ç–æ—Ä—É—é** –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:", parse_mode="Markdown", reply_markup=currency_keyboard())
        return

    # –®–∞–≥ 3: –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã
    if state["to"] is None:
        if text not in ["USD", "EUR", "RUB", "UZS"]:
            bot.send_message(chat_id, "‚ùó –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=currency_keyboard())
            return
        state["to"] = text

        base, target, amount = state["from"], state["to"], state["amount"]
        if base == target:
            bot.send_message(chat_id, "‚ö†Ô∏è –í—ã–±–µ—Ä–∏ —Ä–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã.")
        else:
            rate = get_rate(base, target)
            if rate:
                result = amount * rate
                bot.send_message(
                    chat_id,
                    f"üíπ {amount} {base} = {result:,.2f} {target}\n(1 {base} = {rate:.2f} {target})"
                )
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å (–∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ).")

        # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_state[chat_id] = {"from": None, "amount": None, "to": None}
        bot.send_message(chat_id, "–•–æ—á–µ—à—å –µ—â—ë –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å? –í—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—É—é –≤–∞–ª—é—Ç—É:", reply_markup=currency_keyboard())

bot.polling(none_stop=True)
